{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Xournal++ Note: this website is a new and a work-in-progress. In the meantime, please use the GitHub page for more information. Xournal++ is an cross-platform, open source, hand note-taking software with the target of flexibility, functionality, and speed. It is a modern rewrite and more feature-rich version of the wonderful Xournal program. To install Xournal++, please follow the instructions on the installation page . Some highlighted features Here are some of what we think are the \"killer features\" of Xournal++. You can find a more complete list of features in the User Guide . Supports a wide variety of devices and user workflows Pressure-sensitive styluses and digital pen tablets (e.g. Wacom, Huion, XP Pen, etc. tablets) Plugins support via the Lua programming language Customizeable toolbar, with multiple configurations, e.g. to optimize toolbar for portrait / landscape Notetaking features \"Paper\" backgrounds for notetaking, scratch paper, or whiteboarding Different pen types (e.g. eraser, highlighter) and stroke styles (e.g. solid, dotted) Different shapes, such as lines, arrow, circle, rectangle, splines Shape resizing and rotation LaTeX support (requires a working LaTeX install) Multiple \"layers\" for easier control over overlapping notes and strokes Sidebar with page previews and PDF Bookmarks Audio recording and playback alongside with handwritten notes Rotation and grid snapping File formats Annotate on top of PDFs Export to a variety of formats including SVG, PNG, and PDF Other convenience features Bug reporting, autosave, and auto backup tools Page template definitions Multi language support (over 20 languages supported, with more added by the community!)","title":"Home"},{"location":"#xournal","text":"Note: this website is a new and a work-in-progress. In the meantime, please use the GitHub page for more information. Xournal++ is an cross-platform, open source, hand note-taking software with the target of flexibility, functionality, and speed. It is a modern rewrite and more feature-rich version of the wonderful Xournal program. To install Xournal++, please follow the instructions on the installation page .","title":"Xournal++"},{"location":"#some-highlighted-features","text":"Here are some of what we think are the \"killer features\" of Xournal++. You can find a more complete list of features in the User Guide . Supports a wide variety of devices and user workflows Pressure-sensitive styluses and digital pen tablets (e.g. Wacom, Huion, XP Pen, etc. tablets) Plugins support via the Lua programming language Customizeable toolbar, with multiple configurations, e.g. to optimize toolbar for portrait / landscape Notetaking features \"Paper\" backgrounds for notetaking, scratch paper, or whiteboarding Different pen types (e.g. eraser, highlighter) and stroke styles (e.g. solid, dotted) Different shapes, such as lines, arrow, circle, rectangle, splines Shape resizing and rotation LaTeX support (requires a working LaTeX install) Multiple \"layers\" for easier control over overlapping notes and strokes Sidebar with page previews and PDF Bookmarks Audio recording and playback alongside with handwritten notes Rotation and grid snapping File formats Annotate on top of PDFs Export to a variety of formats including SVG, PNG, and PDF Other convenience features Bug reporting, autosave, and auto backup tools Page template definitions Multi language support (over 20 languages supported, with more added by the community!)","title":"Some highlighted features"},{"location":"installation/","text":"Installation Guide On this page we summarize the main installation options. For more details see the main page of the repository . Depending on your operation system you mainly have the following options to install Xournal++ on your device. Windows Install the latest stable release (currently version 1.0.19) from the releases page Install the latest unstable release (automated nightly build) from the releases page Bulid the latest development version (currently version 1.1.0+dev) from source as described on this wiki page MacOS Install the latest stable release (currently version 1.0.19) from the releases page Install the latest unstable release (automated nightly build) from the releases page Bulid the latest development version (currently version 1.1.0+dev) from source as described on this wiki page Linux Options for all/most distros The following options are available on _most major Linux distros. Install the FlatPak (currently version 1.0.19) from the official FlatHub release Install the AppImage (latest stable release, currently 1.0.19) from the releases page Install the Snap Package (currently version 1.0.16) from the SnapCraft release . This package is unofficial and unmaintained! Bulid the latest development version (currently version 1.1.0+dev) from source as described on this wiki page Options for specific distros (potentially preferable) On specific Linux distros you have the following extra options: Ubuntu and derivatives Install the latest unstable nightly release from the following ppa sudo add-apt-repository ppa:andreasbutti/xournalpp-master sudo apt update sudo apt install xournalpp which you can easily upgrade via sudo apt update && sudo apt upgrade Install the latest stable release from the following unofficial ppa sudo add-apt-repository ppa:apandada1/xournalpp-stable sudo apt update sudo apt install xournalpp Install the latest stable release (currently version 1.0.19) from the releases page Install the latest unstable release (automated nightly build) from the releases page Debian Buster Install the latest stable release (version 1.0.18) from the releases page Install the latest unstable release (automated nightly build) from the releases page Fedora Install the latest stable release via dnf install xournalpp openSuse Install the latest stable release via zypper in xournalpp Solus Install the latest stable release via sudo eopkg it xournalpp Arch Install the latest stable release from the community repository via pacman -S xournalpp","title":"Install"},{"location":"installation/#installation-guide","text":"On this page we summarize the main installation options. For more details see the main page of the repository . Depending on your operation system you mainly have the following options to install Xournal++ on your device.","title":"Installation Guide"},{"location":"installation/#windows","text":"Install the latest stable release (currently version 1.0.19) from the releases page Install the latest unstable release (automated nightly build) from the releases page Bulid the latest development version (currently version 1.1.0+dev) from source as described on this wiki page","title":"Windows"},{"location":"installation/#macos","text":"Install the latest stable release (currently version 1.0.19) from the releases page Install the latest unstable release (automated nightly build) from the releases page Bulid the latest development version (currently version 1.1.0+dev) from source as described on this wiki page","title":"MacOS"},{"location":"installation/#linux","text":"","title":"Linux"},{"location":"installation/#options-for-allmost-distros","text":"The following options are available on _most major Linux distros. Install the FlatPak (currently version 1.0.19) from the official FlatHub release Install the AppImage (latest stable release, currently 1.0.19) from the releases page Install the Snap Package (currently version 1.0.16) from the SnapCraft release . This package is unofficial and unmaintained! Bulid the latest development version (currently version 1.1.0+dev) from source as described on this wiki page","title":"Options for all/most distros"},{"location":"installation/#options-for-specific-distros-potentially-preferable","text":"On specific Linux distros you have the following extra options:","title":"Options for specific distros (potentially preferable)"},{"location":"installation/#ubuntu-and-derivatives","text":"Install the latest unstable nightly release from the following ppa sudo add-apt-repository ppa:andreasbutti/xournalpp-master sudo apt update sudo apt install xournalpp which you can easily upgrade via sudo apt update && sudo apt upgrade Install the latest stable release from the following unofficial ppa sudo add-apt-repository ppa:apandada1/xournalpp-stable sudo apt update sudo apt install xournalpp Install the latest stable release (currently version 1.0.19) from the releases page Install the latest unstable release (automated nightly build) from the releases page","title":"Ubuntu and derivatives"},{"location":"installation/#debian-buster","text":"Install the latest stable release (version 1.0.18) from the releases page Install the latest unstable release (automated nightly build) from the releases page","title":"Debian Buster"},{"location":"installation/#fedora","text":"Install the latest stable release via dnf install xournalpp","title":"Fedora"},{"location":"installation/#opensuse","text":"Install the latest stable release via zypper in xournalpp","title":"openSuse"},{"location":"installation/#solus","text":"Install the latest stable release via sudo eopkg it xournalpp","title":"Solus"},{"location":"installation/#arch","text":"Install the latest stable release from the community repository via pacman -S xournalpp","title":"Arch"},{"location":"guide/","text":"User Guide TODO","title":"User Guide"},{"location":"guide/#user-guide","text":"TODO","title":"User Guide"},{"location":"guide/config/","text":"Configuration TODO","title":"Configuration"},{"location":"guide/config/#configuration","text":"TODO","title":"Configuration"},{"location":"guide/overview/","text":"User Guide TODO","title":"Overview"},{"location":"guide/overview/#user-guide","text":"TODO","title":"User Guide"},{"location":"guide/plugins/","text":"Plugins Xournal++ provides a basic Lua Plugin interface. Plugins can be added without building Xournal++ from source. Their primary use is to add user-specific functionality, shortcuts, make calls to external programs, define user-specific export functions and the like. In general the Lua Plugin interface is still in a very early stage and does not provide much functionality, but it can still be quite useful at times. In order to use Lua Plugins make sure you have Lua (version >=5.3) installed on your device. Plugin manager Plugins must be activated or deactivated in the Plugin manager (from the menubar). The Plugin manager lists the installation folder, description, author and version for each plugin. Only activated plugins will be listed in the menubar and only those can be run. The other plugins are safely excluded. Note that a restart of Xournal++ is required to change the activation of a plugin. Installation folder Currently all plugins reside in the same folder. By default this folder is /usr/local/share/xournalpp/plugins/ under Linux. C:\\Program Files\\Xournal++\\plugins\\ under Windows. Each plugin has its files stored in a subfolder of the plugin folder and contains at least a plugin.ini file and a Lua code file. Custom plugin folder(s) are planned to be added, see this issue , but not yet there. Plugin structure The plugin.ini file contains the name of the author, the version number, info on whether it is enabled by default or not and a reference to the main Lua code file. A sample file (referencing main.lua ) is: plugin.ini [about] ## Author / Copyright notice author = NAME OF THE AUTHOR description = DESCRIPTION OF THE PLUGIN ## If the plugin is packed with Xournal++, use ## <xournalpp> then it gets the same version number version = <xournalpp> [default] enabled = false [plugin] mainfile = main.lua The Lua code file referenced in the plugin.ini file must define a initUi -function that registers toolbar actions and initializes all UI stuff. It is supposed to call the app.registerUi -function, whose argument is a Lua table containing the menu name displayed in Xournal++'s menubar, the callback function used when the plugin is called from the menu or via accelerator, the accelerator used to execute the plugin callback function. The format looks like <Control>a or <Shift><Alt>F1 or <Release>z (for key release). See GTK3 reference for details. The accelerator can be omitted. Using accelerators without ( <Alt> , <Control> , <Shift> ) modifiers is allowed, but will likely break the text tool. You can register multiple menu entires/accelators in the same plugin by using multiple app.registerUi . A sample file for the main Lua code file is: main.lua -- Register all Toolbar actions and intialize all UI stuff function initUi () app . registerUi ({[ \"menu\" ] = \"NAME\" , [ \"callback\" ] = \"run\" , [ \"accelerator\" ] = \"<Alt>F1\" }); -- ADD MORE CODE, IF NEEDED end -- Callback if the menu item is executed function run () -- ADD CODE LIKE -- app.uiAction({[\"action\"]=\"ACTION_TOOL_PEN\"}) -- TO SWITCH TO THE PEN TOOL, OR -- app.changeToolColor({[\"color\"] = 0xff0000, [\"selection\"] = true}) -- TO CHANGE THE COLOR OF THE CURRENT TOOL TO RED end Plugin API The Lua Plugin can execute a (small) number of Xournal++ functions to interact with Xournal++. Those are defined and documented in the Plugin API . Currently the list contains the following functions: app.msgbox for displaying messages to the user and letting the user choose an option by clicking a button app.registerUi used in the initUi -function app.uiAction for simulating a toolbar/menubar click starting some action, app.uiActionSelected for notifying action listeners about selected options, app.changeCurrentPageBackground for changing the background of the current page, app.changeToolColor for changing the color of any tool with color capabilities, app.saveAs for retrieving the filename from a native saveAs dialog. Two more functions are currently been added to the API in a Pull Request for handwriting recognition . app.getStrokes gets the strokes from the selection tool or a page layer app.getWidthAndHeight gets the width and the height from the selection tool or a page layer Future progress on the Plugin API will be reported here. Help is always welcome. Using plugins to define shortcuts for ui actions Currently Xournal++ does not have shortcuts/keybindings configurable in the preferences. However you can write your custom plugin to achieve exactly that. The function app.uiAction used for simulating a toolbar/menubar click can be used for lots of different actions. This command accepts a Lua table with keys \"action\" , \"group\" and \"enabled\" as its argument. The \"group\" key is only used for displaying warnings, so you can omit it. The \"enabled\" key is set to true by default, so you can often omit it as well. The \"action\" key accepts one of the action strings listed in the Control::actionPerformed method in the source code. Note that the list of actions will change when new functionality is added to Xournal++. For example use: app . uiAction ({[ \"action\" ] = \"ACTION_RULER\" }) to activate the ruler (for drawing line segments) or app . uiAction ({[ \"action\" ] = \"ACTION_TOOL_FILL\" , [ \"enabled\" ] = false }) to turn of filling of shapes. Using Lua modules More complex Plugins will require Lua modules for certain operations. For instance if your Plugin needs a more sophisticated GUI, you may want to use the lgi -module via require(\"lgi\") . For security reasons the Lua package path currently only contains the folder of the plugin. So you must add the path where the Lua modules you use are installed. This can be done by executing: package.path = package.path .. \"YOUR PATH(S)\" in the initUI -function. Notable Plugins The QuickSnapshot Plugin uses an external screenshot tool, to quickly take a screen snapshot of a region of the screen and save it into a user specified file The ToggleGrid Plugin provides a shortcut for toggling between \"grid background with snapping to grid\" and \"plain background without snapping to grid\" the ColorCycle Plugin lets you cycle through a list of colors for the current tool by using the same accelerator repeatedly The HandwritingRecognition Plugin (work in progress) uses the google cloud-based IME handwriting API to recognize handwritten text from a selection or page layer in a user-specified language.","title":"Plugins"},{"location":"guide/plugins/#plugins","text":"Xournal++ provides a basic Lua Plugin interface. Plugins can be added without building Xournal++ from source. Their primary use is to add user-specific functionality, shortcuts, make calls to external programs, define user-specific export functions and the like. In general the Lua Plugin interface is still in a very early stage and does not provide much functionality, but it can still be quite useful at times. In order to use Lua Plugins make sure you have Lua (version >=5.3) installed on your device.","title":"Plugins"},{"location":"guide/plugins/#plugin-manager","text":"Plugins must be activated or deactivated in the Plugin manager (from the menubar). The Plugin manager lists the installation folder, description, author and version for each plugin. Only activated plugins will be listed in the menubar and only those can be run. The other plugins are safely excluded. Note that a restart of Xournal++ is required to change the activation of a plugin.","title":"Plugin manager"},{"location":"guide/plugins/#installation-folder","text":"Currently all plugins reside in the same folder. By default this folder is /usr/local/share/xournalpp/plugins/ under Linux. C:\\Program Files\\Xournal++\\plugins\\ under Windows. Each plugin has its files stored in a subfolder of the plugin folder and contains at least a plugin.ini file and a Lua code file. Custom plugin folder(s) are planned to be added, see this issue , but not yet there.","title":"Installation folder"},{"location":"guide/plugins/#plugin-structure","text":"The plugin.ini file contains the name of the author, the version number, info on whether it is enabled by default or not and a reference to the main Lua code file. A sample file (referencing main.lua ) is:","title":"Plugin structure"},{"location":"guide/plugins/#pluginini","text":"[about] ## Author / Copyright notice author = NAME OF THE AUTHOR description = DESCRIPTION OF THE PLUGIN ## If the plugin is packed with Xournal++, use ## <xournalpp> then it gets the same version number version = <xournalpp> [default] enabled = false [plugin] mainfile = main.lua The Lua code file referenced in the plugin.ini file must define a initUi -function that registers toolbar actions and initializes all UI stuff. It is supposed to call the app.registerUi -function, whose argument is a Lua table containing the menu name displayed in Xournal++'s menubar, the callback function used when the plugin is called from the menu or via accelerator, the accelerator used to execute the plugin callback function. The format looks like <Control>a or <Shift><Alt>F1 or <Release>z (for key release). See GTK3 reference for details. The accelerator can be omitted. Using accelerators without ( <Alt> , <Control> , <Shift> ) modifiers is allowed, but will likely break the text tool. You can register multiple menu entires/accelators in the same plugin by using multiple app.registerUi . A sample file for the main Lua code file is:","title":"plugin.ini"},{"location":"guide/plugins/#mainlua","text":"-- Register all Toolbar actions and intialize all UI stuff function initUi () app . registerUi ({[ \"menu\" ] = \"NAME\" , [ \"callback\" ] = \"run\" , [ \"accelerator\" ] = \"<Alt>F1\" }); -- ADD MORE CODE, IF NEEDED end -- Callback if the menu item is executed function run () -- ADD CODE LIKE -- app.uiAction({[\"action\"]=\"ACTION_TOOL_PEN\"}) -- TO SWITCH TO THE PEN TOOL, OR -- app.changeToolColor({[\"color\"] = 0xff0000, [\"selection\"] = true}) -- TO CHANGE THE COLOR OF THE CURRENT TOOL TO RED end","title":"main.lua"},{"location":"guide/plugins/#plugin-api","text":"The Lua Plugin can execute a (small) number of Xournal++ functions to interact with Xournal++. Those are defined and documented in the Plugin API . Currently the list contains the following functions: app.msgbox for displaying messages to the user and letting the user choose an option by clicking a button app.registerUi used in the initUi -function app.uiAction for simulating a toolbar/menubar click starting some action, app.uiActionSelected for notifying action listeners about selected options, app.changeCurrentPageBackground for changing the background of the current page, app.changeToolColor for changing the color of any tool with color capabilities, app.saveAs for retrieving the filename from a native saveAs dialog. Two more functions are currently been added to the API in a Pull Request for handwriting recognition . app.getStrokes gets the strokes from the selection tool or a page layer app.getWidthAndHeight gets the width and the height from the selection tool or a page layer Future progress on the Plugin API will be reported here. Help is always welcome.","title":"Plugin API"},{"location":"guide/plugins/#using-plugins-to-define-shortcuts-for-ui-actions","text":"Currently Xournal++ does not have shortcuts/keybindings configurable in the preferences. However you can write your custom plugin to achieve exactly that. The function app.uiAction used for simulating a toolbar/menubar click can be used for lots of different actions. This command accepts a Lua table with keys \"action\" , \"group\" and \"enabled\" as its argument. The \"group\" key is only used for displaying warnings, so you can omit it. The \"enabled\" key is set to true by default, so you can often omit it as well. The \"action\" key accepts one of the action strings listed in the Control::actionPerformed method in the source code. Note that the list of actions will change when new functionality is added to Xournal++. For example use: app . uiAction ({[ \"action\" ] = \"ACTION_RULER\" }) to activate the ruler (for drawing line segments) or app . uiAction ({[ \"action\" ] = \"ACTION_TOOL_FILL\" , [ \"enabled\" ] = false }) to turn of filling of shapes.","title":"Using plugins to define shortcuts for ui actions"},{"location":"guide/plugins/#using-lua-modules","text":"More complex Plugins will require Lua modules for certain operations. For instance if your Plugin needs a more sophisticated GUI, you may want to use the lgi -module via require(\"lgi\") . For security reasons the Lua package path currently only contains the folder of the plugin. So you must add the path where the Lua modules you use are installed. This can be done by executing: package.path = package.path .. \"YOUR PATH(S)\" in the initUI -function.","title":"Using Lua modules"},{"location":"guide/plugins/#notable-plugins","text":"The QuickSnapshot Plugin uses an external screenshot tool, to quickly take a screen snapshot of a region of the screen and save it into a user specified file The ToggleGrid Plugin provides a shortcut for toggling between \"grid background with snapping to grid\" and \"plain background without snapping to grid\" the ColorCycle Plugin lets you cycle through a list of colors for the current tool by using the same accelerator repeatedly The HandwritingRecognition Plugin (work in progress) uses the google cloud-based IME handwriting API to recognize handwritten text from a selection or page layer in a user-specified language.","title":"Notable Plugins"},{"location":"guide/tips/","text":"Tips TODO","title":"Tips"},{"location":"guide/tips/#tips","text":"TODO","title":"Tips"},{"location":"guide/tools/","text":"Tools & Editing Pen and Highlighter tools The pen and highlighter tools allow you to write , annotate the document and create various shapes using a mouse or a pressure-sensitive stylus. Both pen and highlighter can be used with various colors and thicknesses. In fill mode the enclosed area will automatically be filled. The pen and highlighter tool can also draw various shapes (squares and rectangles, ellipses and circles, arrows, line segments, coordinate systems and splines) instead of strokes. Some of these shapes (line segments, rectangles and circles) can also be automatically recognized using the stroke recognizer. To change the color of any selected stroke or any future strokes you draw, click on one of the color buttons. Besides the preset color buttons, you can also set a custom color by clicking on the Select color button. The fill mode can be toggled by selecting the paint bucket icon (in the default layout, it is to the left of the color buttons). To change the thickness , press one of the thickness buttons (in the default layout, they are to the left of the fill bucket button). In order to draw shapes instead of strokes or to turn on the stroke recognizer use the shapes toggle menu, which you find to the right of the LaTeX tool (Math TEX button) in the default layout. The shapes toggle menu will have a dropdown arrow on its right. The shape modes can be used as follows: Shapes defined by two points In order to draw a line segment or an arrow click at the location of the first point (tail) and drag the cursor to the location of the second end point (head). Ellipses/circles and rectangles/squares can be drawn in similar fashion. These shapes will be symmetrical with respect to the horizontal and vertical axis. The first point can be either the center of the shape or one of the corners (of the surrounding rectangle/square in case of an ellipsis/circle). The second point will always be one of the corners. Pressing the control key will make this shape been drawn from the center , pressing the shift key will make it a perfect circle/square . If you do not want to use the keyboard for these modifiers, you can activate the drawing direction modifiers in the preferences (drawing area panel). Draw UP from the start point if you want the start point to be the center of the shape. Draw LEFT from the start point if you want the shape to be a circle/square. The coordinate system is a simple L-shape. Modifiers can be applied like for ellipses/circles and rectangles/squares. Splines The Spline shape is only available in version 1.1.0+dev . With this shape you can draw polygon courses and smooth curves. Technically these curves are splines consisting of Bezier curve segments of degree at most 3. In order to draw a polygon course you simply click (and immediately release) on the locations where you want the vertices of your polygon course. For drawing a smooth curve you should always drag the mouse/stylus a little after clicking on the locations through which the curve shall pass. The curve will be tangent to the direction you drag out at the chosen points though which the curve passes. You can also combine linear spline segments with curved segments. The points where you click are called anchor points (or knots). They will be displayed with little red circles while editing the spline. The directions you drag out will be displayed as tangents in green color. Technically the two ends of the tangent are control points of the spline. You have several ways of correcting the last anchor point and the last tangent. Press the ARROW keys to move the last anchor point around. Use the keys r (respecitvely Shift + r ) to rotate the tangent (counter) clockwise. Use the keys s (respectively Shift + s ) to scale the last tangent up or down. You can also completely remove the last anchor point (and the corresponding tangent) via the BACKSPACE key. Drawing a spline is finished by either connecting the curve up to the first vertex/anchor point (yielding a closed spline), by double clicking or using the ESCAPE key. Stroke recognizer If the stroke recognizer is turned on, it will attempt to convert every stroke upon completion into either a line segment, a circle or a (possibly rotated) rectangle/square. It will leave the stroke as-is if it cannot match the stroke to one of these shapes. Eraser tool The Eraser tool can remove strokes or parts of strokes. It has three modes: Standard : remove parts of strokes that the cursor moves over. Whiteout : paint a white stroke. Delete Stroke : remove the entirety of any stroke that the cursor touches. LaTeX Tool Using the LaTeX tool you can insert LaTeX formulas into a Xournal++ document. In order to use this tool you must have LaTeX installed on your system. The feature needs to be able to call pdflatex. In addition, the LaTeX standalone package needs to be installed, which typically requires installation of texlive-latex-extra or texlive-standalone . On Ubuntu or similar Linux systems this means sudo apt-get install texlive-latex-extra For other operating systems you will need to consult your LaTeX installation manual on how to add the standalone LaTeX package. Basic LaTeX formulas Clicking on the LaTeX button in the toolbar will bring up a dialog which will allow you to type in a formula. A preview will be displayed in the center of the dialog, which will keep updating as you type and indicate whether your formula is valid. Once you are done, you can click the OK button to insert the LaTeX into the document; the rendered formula will appear at the center of the current page. The formula can be selected, moved scaled and edited as desired. Note that the LaTeX formula will always be set in inline math mode . If you want to exit math mode, you should write a $-sign to leave math mode and add another $-sign at the end to reenter math-mode. For instance the LaTeX formula $ \\huge $ x ^ 2 will use the command \\huge to increase the font size, which cannot be done in math mode. Enhanced LaTeX tool in Xournal++ 1.1.0+dev The LaTeX tool has recently been extended making it much more configurable. Most importantly a customizable template has been implemented, where you can load packages and define macros. Moreover a LaTeX settings panel has been added, where you choose the template, specify the LaTeX generation command and test your LaTeX configuration. The extension is only available in version 1.1.0+dev. Customization of the template A default LaTeX template is provided under the name default_template.tex . By default it is pre-selected in the LaTeX settings panel. Clicking on it, you will find its location in your file system. On Linux systems it will typically be stored in /usr/share/xournalpp/resources . To generate a custom LaTeX template, make a copy of the default template, save it under a different name and start customizing it by adding packages and macros. Some suggestions are listed here: Include the graphicx package by adding \\usepackage{graphicx} to your template file. As an example this will give you the possibility to add rotated text via a LaTeX formula like \\text { \\rotatebox [origin=c] { 90 }{ My Rotated Text }} Include the TikZ package via \\usepackage{tikz} for creating drawings with the powerful TikZ tool. A simple example would be to draw a table (or grid) with n rows and m columns via \\tikz{\\draw (0,0) grid(m,n)} . See this issue for more information. Include the PGFPlots package via \\usepackage{pgfplots} for plotting function graphs. Using a macro you will be able to plot function graphs nicely and very quickly. For example, add the following lines to your template: %for defining commands \\usepackage { xargs } % for drawing and plotting \\usepackage { pgfplots } \\pgfplotsset { compat=newest } % Allows to place the legend below plot \\newcommandx { \\graph } [3][1=,2=] { \\begin { tikzpicture } \\begin { axis } [xlabel= $ x $ ,ylabel= $ y $ , axis lines=center,samples=100, #2] \\addplot [#1] { #3 } ; \\end { axis } \\end { tikzpicture } } Then a LaTeX-formula like \\graph{x^2} will plot the normal parabola and \\graph[domain=-2:2, blue][x=1cm,y=1cm]{x^2} will further restrict the domain, set the color and define units. Include the Listings package via \\usepackage{listings} for proper alignment and syntax coloring of code snippets. You need to define the style with lstset as in the following example, which you can add to your template: \\usepackage { listings } \\lstset { language=C++, basicstyle= \\ttfamily , keywordstyle= \\color { blue } \\ttfamily , stringstyle= \\color { red } \\ttfamily , commentstyle= \\color { green } \\ttfamily , morecomment=[l][ \\color { magenta } ] { \\# } } In the LaTeX formula you can then use the lstlistings enivronment as in the following example \\begin { lstlisting } #include<stdio.h> #include<iostream> // A comment int main(void) { printf(\"Hello World \\n \"); return 0; } \\end { lstlisting }","title":"Tools & Editing"},{"location":"guide/tools/#tools-editing","text":"","title":"Tools &amp; Editing"},{"location":"guide/tools/#pen-and-highlighter-tools","text":"The pen and highlighter tools allow you to write , annotate the document and create various shapes using a mouse or a pressure-sensitive stylus. Both pen and highlighter can be used with various colors and thicknesses. In fill mode the enclosed area will automatically be filled. The pen and highlighter tool can also draw various shapes (squares and rectangles, ellipses and circles, arrows, line segments, coordinate systems and splines) instead of strokes. Some of these shapes (line segments, rectangles and circles) can also be automatically recognized using the stroke recognizer. To change the color of any selected stroke or any future strokes you draw, click on one of the color buttons. Besides the preset color buttons, you can also set a custom color by clicking on the Select color button. The fill mode can be toggled by selecting the paint bucket icon (in the default layout, it is to the left of the color buttons). To change the thickness , press one of the thickness buttons (in the default layout, they are to the left of the fill bucket button). In order to draw shapes instead of strokes or to turn on the stroke recognizer use the shapes toggle menu, which you find to the right of the LaTeX tool (Math TEX button) in the default layout. The shapes toggle menu will have a dropdown arrow on its right. The shape modes can be used as follows:","title":"Pen and Highlighter tools"},{"location":"guide/tools/#shapes-defined-by-two-points","text":"In order to draw a line segment or an arrow click at the location of the first point (tail) and drag the cursor to the location of the second end point (head). Ellipses/circles and rectangles/squares can be drawn in similar fashion. These shapes will be symmetrical with respect to the horizontal and vertical axis. The first point can be either the center of the shape or one of the corners (of the surrounding rectangle/square in case of an ellipsis/circle). The second point will always be one of the corners. Pressing the control key will make this shape been drawn from the center , pressing the shift key will make it a perfect circle/square . If you do not want to use the keyboard for these modifiers, you can activate the drawing direction modifiers in the preferences (drawing area panel). Draw UP from the start point if you want the start point to be the center of the shape. Draw LEFT from the start point if you want the shape to be a circle/square. The coordinate system is a simple L-shape. Modifiers can be applied like for ellipses/circles and rectangles/squares.","title":"Shapes defined by two points"},{"location":"guide/tools/#splines","text":"The Spline shape is only available in version 1.1.0+dev . With this shape you can draw polygon courses and smooth curves. Technically these curves are splines consisting of Bezier curve segments of degree at most 3. In order to draw a polygon course you simply click (and immediately release) on the locations where you want the vertices of your polygon course. For drawing a smooth curve you should always drag the mouse/stylus a little after clicking on the locations through which the curve shall pass. The curve will be tangent to the direction you drag out at the chosen points though which the curve passes. You can also combine linear spline segments with curved segments. The points where you click are called anchor points (or knots). They will be displayed with little red circles while editing the spline. The directions you drag out will be displayed as tangents in green color. Technically the two ends of the tangent are control points of the spline. You have several ways of correcting the last anchor point and the last tangent. Press the ARROW keys to move the last anchor point around. Use the keys r (respecitvely Shift + r ) to rotate the tangent (counter) clockwise. Use the keys s (respectively Shift + s ) to scale the last tangent up or down. You can also completely remove the last anchor point (and the corresponding tangent) via the BACKSPACE key. Drawing a spline is finished by either connecting the curve up to the first vertex/anchor point (yielding a closed spline), by double clicking or using the ESCAPE key.","title":"Splines"},{"location":"guide/tools/#stroke-recognizer","text":"If the stroke recognizer is turned on, it will attempt to convert every stroke upon completion into either a line segment, a circle or a (possibly rotated) rectangle/square. It will leave the stroke as-is if it cannot match the stroke to one of these shapes.","title":"Stroke recognizer"},{"location":"guide/tools/#eraser-tool","text":"The Eraser tool can remove strokes or parts of strokes. It has three modes: Standard : remove parts of strokes that the cursor moves over. Whiteout : paint a white stroke. Delete Stroke : remove the entirety of any stroke that the cursor touches.","title":"Eraser tool"},{"location":"guide/tools/#latex-tool","text":"Using the LaTeX tool you can insert LaTeX formulas into a Xournal++ document. In order to use this tool you must have LaTeX installed on your system. The feature needs to be able to call pdflatex. In addition, the LaTeX standalone package needs to be installed, which typically requires installation of texlive-latex-extra or texlive-standalone . On Ubuntu or similar Linux systems this means sudo apt-get install texlive-latex-extra For other operating systems you will need to consult your LaTeX installation manual on how to add the standalone LaTeX package.","title":"LaTeX Tool"},{"location":"guide/tools/#basic-latex-formulas","text":"Clicking on the LaTeX button in the toolbar will bring up a dialog which will allow you to type in a formula. A preview will be displayed in the center of the dialog, which will keep updating as you type and indicate whether your formula is valid. Once you are done, you can click the OK button to insert the LaTeX into the document; the rendered formula will appear at the center of the current page. The formula can be selected, moved scaled and edited as desired. Note that the LaTeX formula will always be set in inline math mode . If you want to exit math mode, you should write a $-sign to leave math mode and add another $-sign at the end to reenter math-mode. For instance the LaTeX formula $ \\huge $ x ^ 2 will use the command \\huge to increase the font size, which cannot be done in math mode.","title":"Basic LaTeX formulas"},{"location":"guide/tools/#enhanced-latex-tool-in-xournal-110dev","text":"The LaTeX tool has recently been extended making it much more configurable. Most importantly a customizable template has been implemented, where you can load packages and define macros. Moreover a LaTeX settings panel has been added, where you choose the template, specify the LaTeX generation command and test your LaTeX configuration. The extension is only available in version 1.1.0+dev.","title":"Enhanced LaTeX tool in Xournal++ 1.1.0+dev"},{"location":"guide/tools/#customization-of-the-template","text":"A default LaTeX template is provided under the name default_template.tex . By default it is pre-selected in the LaTeX settings panel. Clicking on it, you will find its location in your file system. On Linux systems it will typically be stored in /usr/share/xournalpp/resources . To generate a custom LaTeX template, make a copy of the default template, save it under a different name and start customizing it by adding packages and macros. Some suggestions are listed here: Include the graphicx package by adding \\usepackage{graphicx} to your template file. As an example this will give you the possibility to add rotated text via a LaTeX formula like \\text { \\rotatebox [origin=c] { 90 }{ My Rotated Text }} Include the TikZ package via \\usepackage{tikz} for creating drawings with the powerful TikZ tool. A simple example would be to draw a table (or grid) with n rows and m columns via \\tikz{\\draw (0,0) grid(m,n)} . See this issue for more information. Include the PGFPlots package via \\usepackage{pgfplots} for plotting function graphs. Using a macro you will be able to plot function graphs nicely and very quickly. For example, add the following lines to your template: %for defining commands \\usepackage { xargs } % for drawing and plotting \\usepackage { pgfplots } \\pgfplotsset { compat=newest } % Allows to place the legend below plot \\newcommandx { \\graph } [3][1=,2=] { \\begin { tikzpicture } \\begin { axis } [xlabel= $ x $ ,ylabel= $ y $ , axis lines=center,samples=100, #2] \\addplot [#1] { #3 } ; \\end { axis } \\end { tikzpicture } } Then a LaTeX-formula like \\graph{x^2} will plot the normal parabola and \\graph[domain=-2:2, blue][x=1cm,y=1cm]{x^2} will further restrict the domain, set the color and define units. Include the Listings package via \\usepackage{listings} for proper alignment and syntax coloring of code snippets. You need to define the style with lstset as in the following example, which you can add to your template: \\usepackage { listings } \\lstset { language=C++, basicstyle= \\ttfamily , keywordstyle= \\color { blue } \\ttfamily , stringstyle= \\color { red } \\ttfamily , commentstyle= \\color { green } \\ttfamily , morecomment=[l][ \\color { magenta } ] { \\# } } In the LaTeX formula you can then use the lstlistings enivronment as in the following example \\begin { lstlisting } #include<stdio.h> #include<iostream> // A comment int main(void) { printf(\"Hello World \\n \"); return 0; } \\end { lstlisting }","title":"Customization of the template"}]}